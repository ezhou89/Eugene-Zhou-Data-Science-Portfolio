install.packages("tidyverse")
install.packages("tidymodels")
install.packages("tidyverse")
install.packages("tidytext")
install.packages("tidytext")
install.packages("tidyverse")
install.packages("tidymodels")
install.packages("BiocManager")
install.packages("quantmod")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
ia060122 <- read_csv("Downloads/ia060122.numbers")
View(ia060122)
library(readr)
ia060122 <- read_csv("Downloads/ia060122.csv")
View(ia060122)
ia060122 <- read_csv("Downloads/ia060122.csv")
library(readr)
ia060122_2 <- read_csv("Downloads/ia060122 2.csv")
View(ia060122_2)
sec <- read_csv("Downloads/ia060122.csv")
getwd()
sec <- read_csv("/Users/eugenezhou/Downloads/ia060122.csv")
sec <- readr::read_csv("/Users/eugenezhou/Downloads/ia060122.csv")
sec <- readr::read_csv("/Users/eugenezhou/Downloads/ia060122_2.csv")
sec <- readr::read_csv("/Users/eugenezhou/Downloads/ia060122 2.csv")
problems()
sec %>%
filter(`Umbrella Registration` == "Y")
sec %>%
filter(`Primary Business Name` == "Draper")
sec %>%
filter(grepl(`Primary Business Name`, "Draper"))
sec %>%
filter(
grepl("Draper", `Primary Business Name`))
sec %>%
filter(
grepl("D", `Primary Business Name`))
sec %>%
filter(
grepl("DFJ", `Primary Business Name`))
sec %>%
filter(
grepl("Apollo", `Primary Business Name`))
sec %>%
filter(
grepl("Apollo", `Primary Business Name`))
sec %>%
filter(grepl("Apollo", `Primary Business Name`))
sec %>%
filter(grepl("Bridge", `Primary Business Name`))
sec %>%
filter(grepl("BRIDGE", `Primary Business Name`))
sec %>%
filter(grepl("DRAPER", `Primary Business Name`))
sec %>%
filter(grepl("PENNINGTON", `Primary Business Name`))
sec %>%
filter(grepl("SEQUOIA", `Primary Business Name`))
sec %>%
filter(grepl("BLACKSTONE", `Primary Business Name`))
problems()
sec %>%
filter(`5D(1)(d)` >= 1)
sec %>%
group_by(`5D(1)(d)`)
sec %>%
skimr::skim()
sec %>%
summary()
sec %>%
filter(`5D(d)(1)` >=1)
sec %>%
filter(`7A(16)` == "Y")
knitr::opts_chunk$set(echo = TRUE)
#load r packages
library(tidytuesdayR)
#load r packages
library(tidytuesdayR)
library(tidymodels)
library(httr)
#get horror movie data from GitHub using tidytuesdayR package
tuesdata <- tt_load("2022-11-01")
#get horror movie data from GitHub using tidytuesdayR package
tuesdata <- tt_load("2022-11-01")
horror_movies <- tuesdata$horror_movies
#use slice sample to randomly select rows
set.seed(123)
horror_movies_df <- horror_movies %>%
filter(!is.na(overview), original_language == "en") %>%
slice_sample(n = 1000)
glimpse(horror_movies_df)
#check out 3 random samples of movie overviews
sample(horror_movies_df$overview, size = 3)
embeddings_url <- "https://api.openai.com/v1/embeddings"
auth <- add_headers(Authorization = paste("Bearer",
Sys.getenv("OPENAI_API_KEY")))
body <- list(model = "text-embedding-ada-002", input = horror_movies_df$overview)
resp <- POST(
embeddings_url,
auth,
body = body,
encode = "json"
)
resp$status_code
Sys.getenv("OPENAI_API_KEY")
Sys.setenv(OPENAI_API_KEY = "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")
Sys.getenv("OPENAI_API_KEY")
auth <- add_headers(Authorization = paste("Bearer",
Sys.getenv("OPENAI_API_KEY")))
body <- list(model = "text-embedding-ada-002", input = horror_movies_df$overview)
resp <- POST(
embeddings_url,
auth,
body = body,
encode = "json"
)
resp$status_code
embeddings <- content(resp, as = "text", encoding = "UTF-8")
?content
embeddings <- content(resp, as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(flatten = TRUE)
View(embeddings)
embeddings[["data"]]
View(embeddings)
embeddings <- content(resp, as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(flatten = TRUE)
#pluck data
embeddings %>%
pluck("data", "embedding")
#pluck data
embed_extract <- embeddings %>%
pluck("data", "embedding")
View(embed_extract)
View(embeddings)
#add extracted embeddings as a new column in the horror movie data
horror_embed <- horror_movies_df %>%
mutate(embeddings = embed_extract)
horror_embed %>%
select(id, original_title, embeddings)
embeddings_mat <- matrix(
unlist(horror_embed$embeddings),
ncol = 1536,
byrow = TRUE
)
dim(embeddings_mat)
embeddings_sim <- embeddings_mat / sqrt(rowSumns(embeddings_mat * embeddings_mat))
embeddings_sim <- embeddings_sim %*% t(embeddings_mat)
embeddings_sim <- embeddings_mat / sqrt(rowSumns(embeddings_mat * embeddings_mat))
embeddings_sim <- embeddings_mat / sqrt(rowSums(embeddings_mat * embeddings_mat))
embeddings_sim <- embeddings_sim %*% t(embeddings_mat)
dim(embeddings_sim)
horror_movies %>%
slice(4) %>%
select(title, overview)
embeddings_sim[4, ]
enframe(embeddings_sim[4, ], name = "movie", value = "similarity")
enframe(embeddings_sim[4, ], name = "movie", value = "similarity") %>%
arrange(-similarity)
horror_movies_df %>%
slice(c(935, 379, 380)) %>%
select(title, overview)
horror_movies_df %>%
slice(4) %>%
select(title, overview)
irlba
install.packages("irlba")
horror_pca <- irlba::prcomp_irlba(embeddings_mat, n = 32)
#identify first 32 principal components
set.seed(234)
horror_pca <- irlba::prcomp_irlba(embeddings_mat, n = 32)
summary(horror_pca)
View(horror_embed)
use_tidytemplate()
setwd("~/ezhou89.github.io")
use_tidytemplate()
library(tidyverse)
tt <- tt_load("2023-05-16")
tt %>%
map(glimpse)
tt
tt <- tt_load("2023-05-16")
tt
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
tt %>%
map(glimpse)
tornadoes <- tt$tornados
tornadoes %>%
map(glimpse)
?map
tornadoes %>%
glimpse()
tt
tornadoes %>% skimr::skim()
summary(tornadoes)
tornadoes %>%
glimpse()
tornadoes %>%
summary()
glimpse
tornadoes %>%
glimpse()
install.packages("Matrix")
# load R packages for analysis
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("quanteda")
library(quantmod)
install.packages("quantmod")
