nytrees <- tbl(con_ny_trees, "tree_census_2015")
library(dbplot)
library(leaflet)
glimpse(nytrees)
nytrees %>%
count(curb_loc)
nytrees %>%
count(curb_loc)
con_ny_trees <- dbConnect(
bigrquery::bigquery(),
project = "bigquery-public-data",
dataset = "new_york_trees",
billing = "fleet-furnace-316922"
)
con_ny_trees
nytrees <- tbl(con_ny_trees, "tree_census_2015")
library(dbplot)
library(leaflet)
glimpse(nytrees)
nytrees %>%
count(curb_loc)
locations <- nytrees %>%
filter(curb_loc == "OffsetFromCurb") %>%
filter(health == "Good") %>%
dbplot_raster(longitude, latitude, resolution = 30)
# db_compute_raster(longitude, latitude, resolution = 30)
locations
nytrees %>%
filter(curb_loc == "OffsetFromCurb") %>%
filter(health == "Good") %>%
count()
locations_tbl <- nytrees %>%
filter(curb_loc == "OffsetFromCurb") %>%
filter(health == "Good") %>%
db_compute_raster(longitude, latitude, resolution = 30)
locations_tbl
size <- function(df, field) {
field <- enquo(field)
df %>%
arrange(!! field) %>%
mutate(diff = !! field - lag(!! field)) %>%
filter(diff > 0) %>%
summarise(min(diff)) %>%
pull()
}
lon_size <- locations_tbl %>%
size(longitude)
lon_size
lat_size <- locations_tbl %>%
size(latitude)
lat_size
sq <- locations_tbl %>%
mutate(lon1 = longitude,
lon2 = longitude + lon_size,
lat1 = latitude,
lat2 = latitude + lat_size,
of_max = `n()` / max(`n()`)
)
leaflet() %>%
addTiles() %>%
addRectangles(
sq$lon1, sq$lat1, sq$lon2, sq$lat2
)
fancy <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRectangles(
sq$lon1, sq$lat1, sq$lon2, sq$lat2,
fillOpacity = sq$of_max,
fillColor = "forestgreen",
stroke = FALSE,
popup = glue::glue('Trees {sq$`n()`}')
)
fancy
library(mapview)
mapshot(fancy, file = "images/tree_cover.png")
# load tidymodels and tidyverse packages
library(tidymodels)
library(tidyverse)
# bigrquery is a package to access BigQuery via R
library(bigrquery)
# DBI is a package that interfaces relational databases and R
library(DBI)
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-08-15")
tt <- tt_load(tues)
# Check out the available data
tt
# Extract data from tt
spam <- tt$spam
spam %>% glimpse()
# Group data by gender and count via summarize
cent %>%
group_by(gender) %>%
summarise(n())
View(spam)
spam %>%
group_by(yesno)
spam %>%
group_by(yesno) %>%
summarise(n())
knitr::opts_chunk$set(echo = TRUE)
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-08-15")
tt <- tt_load(tues)
# Check out the available data
tt
# Extract data from tt
spam <- tt$spam
spam %>% glimpse()
# Group data by gender and count via summarize
spam %>%
group_by(yesno) %>%
summarise(n())
spam %>%
group_by(yesno) %>%
summarise(n())
?replace()
replace(spam$yesno, y, 1)
replace(spam$yesno, "y", 1)
replace(spam$yesno, 1, "y")
# load R packages for analysis
library(tidyverse)
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
detach("package:tidyverse", unload = TRUE)
# load R packages for analysis
library(tidyverse)
?stringr
?gather
spam %>%
gather(key = "variable", value = "value", -yesno)
spam2 <- spam %>%
gather(key = "variable", value = "value", -yesno)
spam2
spam2
ggplot(spam2,
aes(x = variable, y = value)) +
geom_boxplot()
ggplot(spam2,
aes(x = variable, y = value, fill = yesno)) +
geom_boxplot()
ggplot(spam2,
aes(x = variable, y = value, fill = yesno)) +
geom_boxplot() +
scale_y_log10()
ggplot(spam2,
aes(x = variable, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10()
ggplot(spam2,
aes(x = variable, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(variable)
?facet_wrap()
ggplot(spam2,
aes(x = variable, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable))
ggplot(spam2,
aes(x = yesno, y = value)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable))
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable))
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable)) +
coord_flip()
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip()
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam") +
theme(legend.key = "none")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam") +
theme(legend.position = "none")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", x = "Percentages", y = "Classification") +
theme(legend.position = "none")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
labs(title = "Email Words and Spam", x = "Percentages", y = "Classification") +
theme(legend.position = "none")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", x = "Percentages", y = "Classification") +
theme(legend.position = "none")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", y = "Percentages", x = "Classification") +
theme(legend.position = "none")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_point() +
# add a linear model fit for each species of cricket
geom_smooth(method = lm, se = FALSE)
ggplot(spam2,
aes(x =  value, y = yesno, fill = variable)) +
geom_point() +
# add a linear model fit for each species of cricket
geom_smooth(method = lm, se = FALSE)
plot(spam[, 1:6])
model1 <- lm(yesno ~ ., data = spma)
model1 <- lm(yesno ~ ., data = spam)
model1 <- glm(yesno ~ ., data = spam)
model1 <- glm(yesno ~ ., data = spam, family = "binomial")
spam$yesno == "y"
spam$yesno == "y" %>% count()
View(spam)
?replace
replace(spam$yesno, "y", 1)
test <- replace(spam$yesno, "y", 1)
test
test %>% unique()
as.logical(spam$yesno)
test <- str_replace(string = "y", pattern = "y", replacement = 1)
test <- str_replace(string = "y", pattern = "y", replacement = "1")
test
test <- str_replace(string = spam$yesno, pattern = "y", replacement = "1")
test
test <- str_replace(string = spam$yesno, pattern = "y", replacement = 1)
test <- str_replace(string = spam$yesno, pattern = "y", replacement = "1")
test <- str_replace(string = spam$yesno, pattern = "n", replacement = "0")
test
test %>% unique()
spam$yesno <- str_replace(string = spam$yesno, pattern = "n", replacement = "0")
spam$yesno <- str_replace(string = spam$yesno, pattern = "y", replacement = "1")
View(spam)
spam$yesno %>% as.numeric()
test <- spam$yesno %>% as.numeric()
spam$yesno <- spam$yesno %>% as.numeric()
model1 <- glm(yesno ~ ., data = spam, family = "binomial")
summary(model1)
model1 %>% tidy()
summary(model1)
ggplot(spam,
aes(x = value, y = yesno, fill = yesno)) +
geom_point()
ggplot(spam,
aes(x = value, y = yesno)) +
geom_point()
ggplot(spam,
aes(x = value, y = yesno)) +
geom_point()
spam3 <- spam %>%
gather(key = "variable", value = "value", -yesno)
spam3
ggplot(spam3,
aes(x = value, y = yesno)) +
geom_point()
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point()
spam3 <- spam %>%
gather(key = "variable", value = "value", -yesno, -crl.tot)
spam3
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point()
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
scale_x_log10()
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = "glm")
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
?geom_smooth
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
# load R packages for analysis
library(tidyverse)
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", y = "Percentages", x = "Classification") +
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
---
title: "2023 August 15 - Spam Email"
```{r Log Regression}
model1 <- glm(yesno ~ ., data = spam, family = "binomial")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", y = "Percentages", x = "Classification") +
theme(legend.position = "none")
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point()
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial"))
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial"))
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial"))
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial")) +
labs(title = "Log Plot",
x = "Values",
y = "Spam/Not Spam")
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial")) +
labs(title = "Log Plot",
x = "Values",
y = "Spam / Not Spam")
getwd()
install.packages("blogdown")
blogdown:::preview_site()
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-5-30")
tt <- tt_load(tues)
usethis::use_git_config(user.name = "ezhou89", user.email = "eugeneczhou@gmail.com")
usethis::create_github_token()
usethis::edit_r_environ()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
tues <- last_tuesday("2023-5-30")
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-5-30")
tt <- tt_load(tues)
# Check out the available data
tt
# Extract data from tt
cent <- tt$centenarians
cent %>% skimr::skim()
# Group data by gender and count via summarize
cent %>%
group_by(gender) %>%
summarise(n())
cent %>%
group_by(gender) %>%
summarise(mean(age))
# Create a new data frame to explore which countries have the highest number of individuals
df1 <- cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`No. of Individuals` = n(),
`Avg Age` = mean(age),
`Shortest` = min(age),
`Longest` = max(age))
df1 %>%
arrange(desc(`No. of Individuals`))
cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age)) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`) %>%
arrange(desc(`Avg Age`)) %>%
head(n = 10)
cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age),
`No. of Individuals` = n()) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`, `No. of Individuals`) %>%
arrange(desc(`Avg Age`)) %>%
head(n = 10)
cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age),
`No. of Individuals` = n()) %>%
filter(`No. of Individuals` > 1) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`, `No. of Individuals`) %>%
arrange(desc(`Avg Age`)) %>%
head(n = 10)
# Load up the world map coordinates
library(maps)
world_map <- map_data("world")
# Replace United States with USA to join the data sets
cent$place_of_death_or_residence[cent$place_of_death_or_residence == "United States"] <- "USA"
# Merge centanarian data with world coordinates into a new data frame
df2 <- cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age),
`No. of Individuals` = n()) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`, `No. of Individuals`) %>%
full_join(world_map, join_by("Country" == "region"))
ggplot(df2) +
geom_map(
dat = world_map, map = world_map, aes(map_id = region),
fill = "white", color = "black", size = 0.25
) +
geom_map(map = world_map, aes(map_id = Country, fill = `No. of Individuals`), size = 0.25) +
scale_fill_gradient2(low = "white", high = "red", na.value = "white", name = "# of People") +
expand_limits(x = world_map$long, y = world_map$lat) +
labs(title = "Countries with the Most Centenarians",
y = "Latitude",
x = "Longitude")
# Save image
# This will save your most recent plot
image <- ggplot(df2) +
geom_map(
dat = world_map, map = world_map, aes(map_id = region),
fill = "white", color = "black", size = 0.25
) +
geom_map(map = world_map, aes(map_id = Country, fill = `No. of Individuals`), size = 0.25) +
scale_fill_gradient2(low = "white", high = "red", na.value = "white", name = "# of People") +
expand_limits(x = world_map$long, y = world_map$lat) +
labs(title = "Countries with the Most Centenarians",
y = "Latitude",
x = "Longitude")
image %>% ggsave(
filename = "map.png",
device = "png")
install.packages(‘markdown’)
install.packages(markdown)
knit_with_parameters("~/R_Working_Directory/tidymodeling/ezhou89.github.io/content/post/2023-05-30-TidyTuesday/2023 MAY 30 - tidy_tuesday.Rmd")
blogdown::check_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
setwd("~/R_Working_Directory/tidymodeling/ezhou89.github.io")
blogdown::serve_site()
