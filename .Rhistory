geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
?geom_smooth
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
# load R packages for analysis
library(tidyverse)
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
---
title: "2023 August 15 - Spam Email"
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", y = "Percentages", x = "Classification") +
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
---
title: "2023 August 15 - Spam Email"
```{r Log Regression}
model1 <- glm(yesno ~ ., data = spam, family = "binomial")
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", y = "Percentages", x = "Classification") +
theme(legend.position = "none")
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point()
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial"))
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial"))
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial"))
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial")) +
labs(title = "Log Plot",
x = "Values",
y = "Spam/Not Spam")
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial")) +
labs(title = "Log Plot",
x = "Values",
y = "Spam / Not Spam")
getwd()
install.packages("blogdown")
blogdown:::preview_site()
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-5-30")
tt <- tt_load(tues)
usethis::use_git_config(user.name = "ezhou89", user.email = "eugeneczhou@gmail.com")
usethis::create_github_token()
usethis::edit_r_environ()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
tues <- last_tuesday("2023-5-30")
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-5-30")
tt <- tt_load(tues)
# Check out the available data
tt
# Extract data from tt
cent <- tt$centenarians
cent %>% skimr::skim()
# Group data by gender and count via summarize
cent %>%
group_by(gender) %>%
summarise(n())
cent %>%
group_by(gender) %>%
summarise(mean(age))
# Create a new data frame to explore which countries have the highest number of individuals
df1 <- cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`No. of Individuals` = n(),
`Avg Age` = mean(age),
`Shortest` = min(age),
`Longest` = max(age))
df1 %>%
arrange(desc(`No. of Individuals`))
cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age)) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`) %>%
arrange(desc(`Avg Age`)) %>%
head(n = 10)
cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age),
`No. of Individuals` = n()) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`, `No. of Individuals`) %>%
arrange(desc(`Avg Age`)) %>%
head(n = 10)
cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age),
`No. of Individuals` = n()) %>%
filter(`No. of Individuals` > 1) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`, `No. of Individuals`) %>%
arrange(desc(`Avg Age`)) %>%
head(n = 10)
# Load up the world map coordinates
library(maps)
world_map <- map_data("world")
# Replace United States with USA to join the data sets
cent$place_of_death_or_residence[cent$place_of_death_or_residence == "United States"] <- "USA"
# Merge centanarian data with world coordinates into a new data frame
df2 <- cent %>%
group_by(place_of_death_or_residence) %>%
summarise(`Avg Age` = mean(age),
`No. of Individuals` = n()) %>%
transmute(`Country` = place_of_death_or_residence, `Avg Age`, `No. of Individuals`) %>%
full_join(world_map, join_by("Country" == "region"))
ggplot(df2) +
geom_map(
dat = world_map, map = world_map, aes(map_id = region),
fill = "white", color = "black", size = 0.25
) +
geom_map(map = world_map, aes(map_id = Country, fill = `No. of Individuals`), size = 0.25) +
scale_fill_gradient2(low = "white", high = "red", na.value = "white", name = "# of People") +
expand_limits(x = world_map$long, y = world_map$lat) +
labs(title = "Countries with the Most Centenarians",
y = "Latitude",
x = "Longitude")
# Save image
# This will save your most recent plot
image <- ggplot(df2) +
geom_map(
dat = world_map, map = world_map, aes(map_id = region),
fill = "white", color = "black", size = 0.25
) +
geom_map(map = world_map, aes(map_id = Country, fill = `No. of Individuals`), size = 0.25) +
scale_fill_gradient2(low = "white", high = "red", na.value = "white", name = "# of People") +
expand_limits(x = world_map$long, y = world_map$lat) +
labs(title = "Countries with the Most Centenarians",
y = "Latitude",
x = "Longitude")
image %>% ggsave(
filename = "map.png",
device = "png")
install.packages(‘markdown’)
install.packages(markdown)
knit_with_parameters("~/R_Working_Directory/tidymodeling/ezhou89.github.io/content/post/2023-05-30-TidyTuesday/2023 MAY 30 - tidy_tuesday.Rmd")
blogdown::check_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
setwd("~/R_Working_Directory/tidymodeling/ezhou89.github.io")
blogdown::serve_site()
blogdown::new_content()
getwd()
blogdown::new_content(path = "/Users/eugenezhou/R_Working_Directory/tidymodeling/ezhou89.github.io/content/post")
blogdown::new_content(open = "/Users/eugenezhou/R_Working_Directory/tidymodeling/ezhou89.github.io/content/post")
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
library(edgar)
library(tidyverse)
library(tidyverse)
library(tidymodels)
output <- getFilingsHTML(cik.no = c(1000180, 38079), c('10-K','10-Q'),
2006, quarter = c(1, 2, 3), useragent)
output <- getFilingsHTML(cik.no = c(1000180, 38079), c('10-K','10-Q'),
2006, quarter = c(1, 2, 3), useragent = "eugenezh@usc.edu")
library(finreportr)
library(finreportr)
install.packages("finreportr")
library(finreportr)
CompanyInfo("GOOG")
options(HTTPUserAgent = "eugenezh@usc.edu")
CompanyInfo("GOOG")
CompanyInfo("GOOG") %>% glimpse()
CompanyInfo("GOOG") %>% select(CIK)
CompanyInfo("GOOG")
goog <- CompanyInfo("GOOG")
glimpse(goog)
goog$CIK
AnnualReports("GOOG")
GetIncome("GOOG")
AnnualReports("GOOG")
GetIncome("GOOG", 2023)
GetIncome("GOOG", 2022)
GetIncome("GOOG", 2023)
GetIncome("FB", 2016)
GetIncome("META", 2016)
GetIncome("AAPL", 2016)
GetIncome("AAPL", 2023)
GetIncome("AAPL", 2022)
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-5-30")
tt <- tt_load(tues)
# Check out the available data
tt
knitr::opts_chunk$set(echo = TRUE)
tt <- tt_load(last_tuesday())
# Check out the available data
tt
tt %>% glimpse
tt %>% glimpse()
ref_pop <- tt$population
ref_pop %>% glimpse()
ref_pop %>%
group_by(coo)
ref_pop %>%
group_by(coo) %>%
order_by(refugees)
ref_pop %>%
group_by(coo)
ref_pop %>%
group_by(coo) %>%
summarise(coo_name, refugees)
?summarise
ref_pop %>%
group_by(coo)
ref_pop %>%
group_by(coo, year) %>%
summarise(coo_name, refugees)
ref_pop %>%
group_by(coo, year)
ref_pop %>%
group_by(coo, year) %>%
arrange(refugees)
ref_pop %>%
select(-coo, -coa,)
df <- ref_pop %>%
select(-coo, -coa,)
df %>%
group_by(coo, year) %>%
arrange(refugees)
df %>%
group_by(year, coo_iso) %>%
arrange(refugees)
df %>%
group_by(year, coo_iso) %>%
summarise(coo_name, refugees)
df %>%
group_by(year, coo_iso) %>%
summarise(year, coo_name, refugees)
?reframe
table <- c("a", "b", "d", "f")
df <- tibble(
g = c(1, 1, 1, 2, 2, 2, 2),
x = c("e", "a", "b", "c", "f", "d", "a")
)
# `reframe()` allows you to apply functions that return
# an arbitrary number of rows
df %>%
reframe(x = intersect(x, table))
df %>%
group_by(year, coo_iso)
df %>%
group_by(year, coo_iso)
# use select to remove the UNHCR-coded fields
df <- ref_pop %>%
select(-coo, -coa,)
df %>%
group_by(year, coo_iso)
df %>%
group_by(year, coo_iso) %>%
summarise_all()
?summarise_all
summarise(across(c("year", "coo_name", "refugees"))
df %>%
df %>%
group_by(year, coo_iso) %>%
summarise(across(c("year", "coo_name", "refugees")))
df %>%
group_by(year, coo_iso) %>%
summarise(across(c("coo_name", "refugees")))
df %>%
group_by(year, coo_iso) #%>%
View(df)
df %>%
group_by(coo_iso) %>%
summarise(across(c("year", "coo_name", "refugees")))
df %>%
group_by(year, coo_iso)
df_group <- df %>%
group_by(year, coo_iso)
df_group
df_group %>%
summarise(year)
df_group %>%
summarise(year, num = mean(refugees))
df_group <- df %>%
group_by(year, coo_iso) %>%
group_vars()
df %>%
group_by(year, coo_iso) %>%
group_vars()
df %>%
group_by(coo_name, coo_iso)
df %>%
group_by(coo_name, coo_iso) %>%
summarise(refugees)
df %>%
group_by(coo_name, coo_iso) %>%
summarise(year, refugees)
df %>%
group_by(coo_name, coo_iso)
df %>%
group_by(coo_name, coo_iso) %>%
summarise(year, refugees)
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(year, refugees)
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(n())
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(n()) %>%
arrange(year)
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(n()) %>%
arrange(desc(year))
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(n())
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(year, refugees, n())
df %>%
group_by(coo_name, coo_iso) %>%
summarise(year, refugees, n())
df %>%
group_by(coo_name, coo_iso) %>%
summarise(refugees, n())
summarise(refugees
df %>%
df %>%
group_by(coo_name, coo_iso) %>%
summarise(refugees)
View(df)
df %>%
group_by(coo_name, coo_iso, coa_name, coa_iso) %>%
summarise(refugees)
df %>%
group_by(coo_name, coo_iso, coa_name, coa_iso) %>%
summarise(year, refugees)
df %>%
group_by(year, coo_name, coo_iso)
df %>%
group_by(year, coo_name, coo_iso)
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(sum(refugees))
df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(coo_refugees = sum(refugees))
df2 <- df %>%
group_by(year, coo_name, coo_iso) %>%
summarise(coo_refugees = sum(refugees))
df2
df2 %>%
arrange(coo_refugees)
df2 %>%
arrange(desc(coo_refugees))
# let's do a quick sanity check
df2 %>%
arrange(desc(coo_refugees))
df %>%
filter(coo_iso = "SYR")
df %>%
filter(coo_iso == "SYR")
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso)
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso) %>%
ggplot() +
aes(x = year, y = refugees, fill = coa_iso) +
geom_col()
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso) %>%
ggplot() +
aes(x = year, y = refugees, fill = coa_iso) +
geom_col() +
scale_y_log10()
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso) %>%
ggplot() +
aes(x = year, y = refugees, fill = coa_iso) +
geom_col() +
scale_y_log10() +
theme(legend.position = "bottom")
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso) %>%
ggplot() +
aes(x = year, y = refugees, fill = coa_iso) +
geom_col() +
scale_y_log10() +
theme(legend.position = "none")
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso) %>%
ggplot() +
aes(x = year, y = refugees, fill = coa_iso) +
geom_col() +
theme(legend.position = "none")
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso) %>%
ggplot() +
aes(x = year, y = refugees, fill = coa_iso) +
geom_col() +
theme(legend.position = "none") +
labs(title = "Syrian Refugees",
x = "Year",
y = "# of Refugees/Year")
df %>%
filter(coo_iso == "SYR") %>%
group_by(coa_iso) %>%
ggplot() +
aes(x = year, y = refugees, fill = coa_iso) +
geom_col() +
theme(legend.position = "none") +
labs(title = "Syrian Refugees Per Year",
x = "Year",
y = "# of Refugees")
blogdown:::preview_site()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
# load R packages for analysis
library(tidyverse)
library(tidytuesdayR)
# Download the weekly data and make available in the tt object.
# Using the last_tuesday function gives us the latest TidyTuesday data from today's date
tues <- last_tuesday("2023-08-15")
tt <- tt_load(tues)
# Check out the available data
tt
# Extract data from tt
spam <- tt$spam
spam %>% glimpse()
# Group data by gender and count via summarize
spam %>%
group_by(yesno) %>%
summarise(n())
spam2 <- spam %>%
gather(key = "variable", value = "value", -yesno)
spam2
ggplot(spam2,
aes(x = yesno, y = value, fill = yesno)) +
geom_boxplot(notch = TRUE) +
scale_y_log10() +
facet_wrap(vars(variable), scales = "free") +
coord_flip() +
labs(title = "Email Words and Spam", y = "Percentages", x = "Classification") +
theme(legend.position = "none")
spam$yesno <- str_replace(string = spam$yesno, pattern = "n", replacement = "0")
spam$yesno <- str_replace(string = spam$yesno, pattern = "y", replacement = "1")
spam$yesno <- spam$yesno %>% as.numeric()
spam3 <- spam %>%
gather(key = "variable", value = "value", -yesno, -crl.tot)
spam3
model1 <- glm(yesno ~ ., data = spam, family = "binomial")
summary(model1)
ggplot(spam3,
aes(x = value, y = yesno, color = variable)) +
geom_point() +
geom_smooth(method = glm, method.args = list(family = "binomial")) +
labs(title = "Log Plot",
x = "Values",
y = "Spam / Not Spam")
